apiVersion: batch/v1
kind: Job
metadata:
  generateName: keycloak-client-creation-
  name: keycloak-client-creation
  namespace: openmfp-system
spec:
  activeDeadlineSeconds: 1800
  backoffLimit: 6
  completionMode: NonIndexed
  completions: 1
  parallelism: 1
  suspend: false
  template:
    spec:
      automountServiceAccountToken: true
      serviceAccountName: keycloak-client-creation
      containers:
        - args:
            - |
              #!/bin/sh
              set -ex
              
              MAX_RETRIES=15
              RETRY_DELAY=5
              
              for i in $(seq 1 $MAX_RETRIES); do
                # Get the admin token
                TOKEN=$(curl --location --request POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
                --header 'Content-Type: application/x-www-form-urlencoded' \
                --data-urlencode "username=admin" \
                --data-urlencode "password=admin" \
                --data-urlencode 'grant_type=password' \
                --data-urlencode 'client_id=admin-cli' | jq -r '.access_token')
              
                if [ -n "$TOKEN" ]; then
                  break
                elif [ $i -eq $MAX_RETRIES ]; then
                  echo "Failed to get token after $MAX_RETRIES attempts, exiting"
                  exit 1
                else
                  echo "Failed to get token, attempt $i/$MAX_RETRIES. Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                fi
              done
              
              echo "Patch the realm to allow for user registartion"
              curl -X PUT -H 'Content-Type: application/json' -H "Authorization: bearer ${TOKEN}" -d '{"registrationAllowed": true, "registrationEmailAsUsername": true}' "$KEYCLOAK_URL/admin/realms/master"

              # TODO: check if client exists
              # Create the client
              CLIENT_ID="openmfp"
              RESP=$(curl -X POST -d '{ "clientId": "'$CLIENT_ID'","redirectUris": ["http://localhost:8080/callback*"], "attributes": {"access.token.lifespan": 3600} }' -H "Content-Type:application/json" -H "Authorization: bearer ${TOKEN}" "$KEYCLOAK_URL/realms/master/clients-registrations/default")
              ERR=$(echo "$RESP" | jq -r '.error_description')
              
              if [ "$ERR" == "Client Identifier in use" ]; then
                echo "Client already existing"
                exit 0
              fi
              
              if [ "$ERR" != "null" ]; then
                echo "Error creating client: $ERR"
                exit 1
              fi
              
              CLIENT_SECRET=$(echo "$RESP" |  jq -r '.secret')
              
              # Get the bearer token and API server address
              API_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              API_SERVER_URL=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT
              
              CLIENT_ID_B64=$(echo -n "$CLIENT_ID" | base64)
              CLIENT_SECRET_B64=$(echo -n "$CLIENT_SECRET" | base64)
              
              PAYLOAD=$(cat <<EOF
              {
                "apiVersion": "v1",
                "kind": "Secret",
                "metadata": {
                  "name": "portal-client-secret-openmfp",
                  "namespace": "openmfp-system"
                },
                "type": "Opaque",
                "data": {
                  "id": "$CLIENT_ID_B64",
                  "secret": "$CLIENT_SECRET_B64"
                }
              }
              EOF
              )
              
              curl -k -X POST $API_SERVER_URL/api/v1/namespaces/openmfp-system/secrets \
                -H "Authorization: Bearer $API_TOKEN" \
                -H 'Content-Type: application/json' \
                -d "$PAYLOAD"

              EMAIL_CLIENT_SCOPE=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes" |jq -r '.[] | select(.name=="email") |.id')
              EMAIL_MAPPER_ID=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$EMAIL_CLIENT_SCOPE/protocol-mappers/models" | jq -r '.[] | select(.name=="email") | .id')
              EMAIL_MAPPER_PAYLOAD=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$EMAIL_CLIENT_SCOPE/protocol-mappers/models/$EMAIL_MAPPER_ID" | jq -c '.config.["claim.name"]="mail"')
              curl -X PUT -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d $EMAIL_MAPPER_PAYLOAD "$KEYCLOAK_URL/admin/realms/master/client-scopes/$EMAIL_CLIENT_SCOPE/protocol-mappers/models/$EMAIL_MAPPER_ID"

              PROFILE_CLIENT_SCOPE=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes" |jq -r '.[] | select(.name=="profile") |.id')

              FAMILY_NAME_MAPPER_ID=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$PROFILE_CLIENT_SCOPE/protocol-mappers/models" | jq -r '.[] | select(.name=="family name") | .id')
              FAMILY_NAME_MAPPER_PAYLOAD=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$PROFILE_CLIENT_SCOPE/protocol-mappers/models/$FAMILY_NAME_MAPPER_ID" | jq -c '.config.["claim.name"]="last_name"')
              curl -X PUT -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$FAMILY_NAME_MAPPER_PAYLOAD" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$PROFILE_CLIENT_SCOPE/protocol-mappers/models/$FAMILY_NAME_MAPPER_ID"
              
              GIVEN_NAME_MAPPER_ID=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$PROFILE_CLIENT_SCOPE/protocol-mappers/models" | jq -r '.[] | select(.name=="given name") | .id')
              GIVEN_NAME_MAPPER_PAYLOAD=$(curl -H "Authorization: Bearer $TOKEN" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$PROFILE_CLIENT_SCOPE/protocol-mappers/models/$GIVEN_NAME_MAPPER_ID" | jq -c '.config.["claim.name"]="first_name"')
              curl -X PUT -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$GIVEN_NAME_MAPPER_PAYLOAD" "$KEYCLOAK_URL/admin/realms/master/client-scopes/$PROFILE_CLIENT_SCOPE/protocol-mappers/models/$GIVEN_NAME_MAPPER_ID"

          command:
            - /bin/sh
            - -c
          env:
            - name: KEYCLOAK_URL
              value: http://keycloak.openmfp-system.svc.cluster.local:8080/keycloak
          image: ghcr.io/openmfp/charts/job/curl-jq:latest
          imagePullPolicy: Always
          name: keycloak-client-creation
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: ghcr-credentials
      restartPolicy: Never
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
